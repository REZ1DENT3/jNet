// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  jNet.Event = function(model) {
    model.prototype.bind = function(event, fn) {
      var events, i, index, num, part, parts, results;
      events = this.__events__ = this.__events__ || {};
      parts = event.split(/\s+/);
      num = parts.length;
      i = 0;
      results = [];
      while (i < num) {
        events[part = parts[i]] = events[part] || [];
        index = events[part].indexOf(fn);
        if (index === -1) {
          events[part].push(fn);
        }
        results.push(i++);
      }
      return results;
    };
    model.prototype.unbind = function(event, fn) {
      var eventName, events, i, index, num, parts, results;
      events = this.__events__;
      if (!events) {
        return this;
      }
      parts = event.split(/\s+/);
      i = 0;
      num = parts.length;
      results = [];
      while (i < num) {
        if ((eventName = parts[i]) in events !== false) {
          index = events[eventName].indexOf(fn);
          if (index !== -1) {
            events[eventName].splice(index, 1);
          }
        }
        results.push(i++);
      }
      return results;
    };
    model.prototype.trigger = function(event) {
      var args, events, i, results;
      events = this.__events__;
      if (!events || event in events === false) {
        return this;
      }
      args = Array.prototype.slice.call(arguments, 1);
      i = events[event].length - 1;
      results = [];
      while (i >= 0) {
        events[event][i].apply(this, args);
        results.push(i--);
      }
      return results;
    };
    model.prototype.one = function(event, fn) {
      var fnc;
      fnc = function() {
        this.unbind(event, fnc);
        fn.apply(this, Array.prototype.slice.call(arguments));
      };
      return this.bind(event, fnc);
    };
    return model;
  };

}).call(this);

//# sourceMappingURL=event.js.map
