{
  "name": "Jnet",
  "tagline": "JavaScript Framework",
  "body": "# jNet\r\n\r\nJavaScript Framework\r\n\r\n```JavaScript\r\n// todo: description jNetFramework\r\n```\r\n\r\njNetFramework includes others frameworks\r\n\r\n1. https://github.com/undozen/fetch\r\n1. https://github.com/js-cookie/js-cookie\r\n1. https://github.com/michaelvillar/dynamics.js\r\n\r\nUsed [1] framework in jNet Framework can with halped constraction \r\n\r\n```JavaScript\r\nvar fetch = jNet.fetch;\r\n```\r\n\r\nUsed [2] ...\r\n\r\n```JavaScript\r\nvar cookies = jNet.cookies;\r\n```\r\n\r\n\r\nUsed [3] ...\r\n\r\n```JavaScript\r\nvar dynamics = jNet.dynamics;\r\n```\r\n\r\n## todo list\r\n- [x] parent\r\n- [x] parents\r\n- [x] text\r\n- [x] append\r\n- [x] appendTo\r\n- [x] prepend\r\n- [x] prependTo\r\n- [x] innerHTML (alias html)\r\n- [x] outerHTML\r\n- [x] after\r\n- [x] before\r\n\r\n### Changelog\r\n\r\n#### 10/6/16, 18:15\r\n\r\nImplement tests for methods jNetObject/jNet (Feature #23)\r\n\r\nImplement parents (Feature #3)\r\n\r\nImplement parent (Feature #2)\r\n\r\nnow the get method at the undefined index returns array\r\n\r\nFixed more bugs\r\n\r\n- [x] parent\r\n- [x] parents\r\n\r\nExample (parents):\r\n\r\n```html\r\n<div>\r\n    <p>hello</p>\r\n    <ul id=\"test1\">\r\n        <li class=\"boo\"><a href=\"\">1</a></li>\r\n        <li class=\"foo\"><a href=\"\">2</a></li>\r\n        <li class=\"bar\"><a href=\"\">3</a></li>\r\n    </ul>\r\n    <div>\r\n        <p>hello</p>\r\n        <ul id=\"test2\">\r\n            <li class=\"boo\"><a href=\"\">1</a></li>\r\n            <li class=\"foo\"><a href=\"\">2</a></li>\r\n            <li class=\"bar\"><a href=\"\">3</a></li>\r\n        </ul>\r\n    </div>\r\n</div>\r\n```\r\n\r\n```JavaScript\r\njNet('li').parents('ul'); // #test1, #test2\r\njNet('li').parents('div'); // div, div \r\n\r\njNet('li').parents(); // ul#test2, div, ul#test1, div, body, html\r\n\r\njNet('li').parents('*', 2); // ul#test2, div, ul#test1, div\r\njNet('li').parents('*', 3); // ul#test2, div, ul#test1, div, body\r\njNet('li').parents('*', 4); // ul#test2, div, ul#test1, div, body, html\r\n\r\njNet('div').parents(); // div, body, html\r\n```\r\n\r\nExample (parent):\r\n\r\n```html\r\n<div>\r\n    <p>hello</p>\r\n    <ul id=\"test1\">\r\n        <li class=\"boo\"><a href=\"\">1</a></li>\r\n        <li class=\"foo\"><a href=\"\">2</a></li>\r\n        <li class=\"bar\"><a href=\"\">3</a></li>\r\n    </ul>\r\n    <div>\r\n        <p>hello</p>\r\n        <ul id=\"test2\">\r\n            <li class=\"boo\"><a href=\"\">1</a></li>\r\n            <li class=\"foo\"><a href=\"\">2</a></li>\r\n            <li class=\"bar\"><a href=\"\">3</a></li>\r\n        </ul>\r\n    </div>\r\n</div>\r\n```\r\n\r\n```JavaScript\r\njNet('li').parent(); // #test1, #test2\r\njNet('li').parent('p'); // jNetObject {length: 0}\r\njNet('div').parent(); // body, div\r\njNet('div').parent('div'); // div\r\n```\r\n\r\n#### 10/6/16, 16:40\r\n\r\nremove alias jNet.oFn\r\n\r\nadd global jNetObject\r\n\r\nadd new method jNet.addMethod \r\n(author: John Resig, http://ejohn.org/blog/javascript-method-overloading/)\r\n\r\ntest toString is fixed\r\n\r\nExample (Overload method jNetObject):\r\n\r\n```JavaScript\r\njNetObject.fn.append = (function () {\r\n    var parentMethod = jNetObject.fn.append;\r\n    return function (selector) {\r\n        console.log([this, selector]);\r\n        return parentMethod.call(this, selector);\r\n    };\r\n})();\r\n```\r\n\r\nExample (jNet.Event):\r\n\r\n```html\r\n<ul id=\"test1\">\r\n    <li class=\"boo\"><a href=\"\">1</a></li>\r\n    <li class=\"foo\"><a href=\"\">2</a></li>\r\n    <li class=\"bar\"><a href=\"\">3</a></li>\r\n</ul>\r\n```\r\n\r\n```JavaScript\r\nvar $ = jNet;\r\n\r\n// modification, add method from jNet.Event\r\n$.Event(jNetObject); \r\n\r\njNetObject.fn.append = (function () {\r\n    var parentMethod = jNetObject.fn.append;\r\n    return function (selector) {\r\n        this.trigger('append:selector', selector);\r\n        return parentMethod.call(this, selector);\r\n    };\r\n})();\r\n\r\nvar $ul = $('ul');\r\n\r\nvar index = $ul.find('li').length + 1;\r\n\r\n$ul.bind('append:selector', (function () {\r\n    var consoleMethods = ['info', 'warn'];\r\n    return function (selector) {\r\n        console[consoleMethods[index % consoleMethods.length]](\r\n            'the element \"' + selector + '\" has been added to the \"ul\" element'\r\n        );\r\n    }\r\n})());\r\n\r\nsetInterval(function () {\r\n    var newLi = $('<li>' + ++index + '</li>');\r\n    newLi.hide(0);\r\n    newLi.show(450);\r\n    $ul.append(newLi);\r\n}, 900);\r\n```\r\n\r\nExample (jNet.addMethod):\r\n\r\n```JavaScript\r\n// Hereâ€™s the function in question:\r\n\r\njNet.addMethod\r\n\r\n// and here is how you might use it:\r\n\r\nfunction Users(){\r\n  jNet.addMethod(this, \"find\", function(){\r\n    // Find all users...\r\n  });\r\n  jNet.addMethod(this, \"find\", function(name){\r\n    // Find a user by name\r\n  });\r\n  jNet.addMethod(this, \"find\", function(first, last){\r\n    // Find a user by first and last name\r\n  });\r\n}\r\n\r\n// Or, if you wanted to use it with an object prototype:\r\n\r\nfunction Users(){}\r\njNet.addMethod(Users.prototype, \"find\", function(){\r\n  // Find all users...\r\n});\r\njNet.addMethod(Users.prototype, \"find\", function(name){\r\n  // Find a user by name\r\n});\r\njNet.addMethod(Users.prototype, \"find\", function(first, last){\r\n  // Find a user by first and last name\r\n});\r\n\r\nvar users = new Users();\r\nusers.find(); // Finds all\r\nusers.find(\"John\"); // Finds users by name\r\nusers.find(\"John\", \"Resig\"); // Finds users by first and last name\r\nusers.find(\"John\", \"E\", \"Resig\"); // Does nothing\r\n```\r\n\r\n#### 10/6/16, 15:44\r\n\r\nImplement jNet.Event\r\n\r\nExample:\r\n\r\n```JavaScript\r\nvar Model = jNet.Event(function (options) {\r\n\r\n    this.id = null;\r\n    this.firstname = null;\r\n    this.lastname = null;\r\n    \r\n    if (typeof options !== \"undefined\") {\r\n        var self = this;\r\n        jNet.each(options, function (key, value) {\r\n            self[key] = value;\r\n        });\r\n    }\r\n    \r\n    return this;\r\n\r\n});\r\n\r\nvar man = new Model({\r\n    firstname: 'Alex',\r\n    lastname: 'Ivanov',\r\n    changeId: function (id) {\r\n        this.id = id;\r\n        this.trigger('change:id', id);\r\n    }\r\n});\r\n\r\nman.bind('change:id', function (id) {\r\n    console.warn('ID changed to: ' + id);\r\n});\r\n\r\nman.changeId(1); // ID changed to: 1\r\nman.changeId(2); // ID changed to: 2\r\nman.changeId(3); // ID changed to: 3\r\nman.changeId(4); // ID changed to: 4\r\n\r\nconsole.info(man);\r\n```\r\n\r\n#### 10/6/16, 15:40\r\n\r\njNet.each is Fixed for Object's. { a: \"hello\", b: \"world\" }\r\nif key in object is finite, then callback in first parameter\r\nget number, else string\r\n\r\nstart developer box\r\n\r\nstart developer laoder\r\n\r\nstart developer event (bind, unbind, trigger, one)\r\n\r\ntest jNet.each added\r\n\r\n#### 8/6/16, 22:20\r\n\r\nI have replaced \"superagent\" with \"fetch-polyfill\" as there \r\nwas a naydna a big mistake in work of a framework\r\n\r\nhttps://github.com/undozen/fetch\r\n\r\n#### 8/6/16, 10:15\r\n\r\nclosest is fixed bug\r\n\r\nadded method matchesSelector \r\n\r\n#### 8/6/16, 09:33\r\n\r\nthe method prepend is fixed\r\n\r\nthe method prependTo is fixed\r\n\r\nnew build\r\n\r\n#### 8/6/16, 08:51\r\n\r\nImplement offsetHeight, offsetWidth\r\n\r\nImplement isHidden (used offsetHeight, offsetWidth)\r\n\r\nadd test for hide method (used isHidden)\r\n\r\nadd test for show method (used isHidden, css)\r\n\r\nreturnList is fixed\r\n\r\n- [x] offsetHeight\r\n- [x] offsetWidth\r\n- [x] isHidden\r\n\r\nExample (offsetHeight):\r\n\r\n```JavaScript\r\njNet('div').offsetHeight() // int or array [10, 10, 10..]..\r\n```\r\n\r\nExample (offsetWidth):\r\n\r\n```JavaScript\r\njNet('div').offsetWidth() // int or array [10, 10, 10..]..\r\n```\r\n\r\nExample (isHidden):\r\n\r\n```JavaScript\r\njNet('div').isHidden() // true or false, or array [true, false, false]...\r\n```\r\n\r\n#### 7/6/16, 16:45\r\n\r\nOptimization indexOf\r\n\r\n#### 7/6/16, 13:08\r\n\r\nadd method get\r\n\r\nfixed small bugs\r\n\r\n- [x] get\r\n\r\n#### 7/6/16, 12:56\r\n\r\nImplement index (Feature #22)\r\n\r\n- [x] index\r\n\r\nExample:\r\n\r\n```haml\r\n%ul\r\n  %li 1\r\n  %li.foo 2\r\n  %li 3\r\n```\r\n\r\n```JavaScript\r\njNet('.foo').index() // 1\r\njNet('li').index() // [0, 1, 2]\r\n```\r\n\r\n#### 6/6/16, 22:55\r\n\r\nImplement appendTo (Feature #18)\r\n\r\nImplement prepend (Feature #17)\r\n\r\n- [x] appendTo\r\n- [x] prependTo\r\n\r\nExample (appendTo):\r\n\r\n```haml\r\n%ul\r\n    %li 1\r\n    %li 2\r\n    %li 3\r\n```\r\n\r\n```JavaScript\r\njNet('body').append('<hr/>')\r\n// jNetObject {0: body, length: 1}\r\n\r\njNet('body').append('<ul/>')\r\n// jNetObject {0: body, length: 1}\r\n\r\njNet('li').appendTo(jNet('ul').last())\r\n// jNetObject {0: ul, length: 1}\r\n```\r\n\r\n```haml\r\n%ul\r\n%hr\r\n%ul\r\n    %li 1\r\n    %li 2\r\n    %li 3\r\n```\r\n\r\n```JavaScript\r\njNet('<li>4</li>').appendTo(jNet('ul').last())\r\n// jNetObject {0: ul, length: 1}\r\n```\r\n\r\n```haml\r\n%ul\r\n%hr\r\n%ul\r\n    %li 1\r\n    %li 2\r\n    %li 3\r\n    %li 4\r\n```\r\n\r\nExample (prependTo):\r\n\r\n```haml\r\n%ul\r\n    %li 1\r\n    %li 2\r\n    %li 3\r\n```\r\n\r\n```JavaScript\r\njNet('<li>0</li>').prependTo(jNet('ul'))\r\n// jNetObject {0: ul, length: 1}\r\n```\r\n\r\n```haml\r\n%ul\r\n    %li 0\r\n    %li 1\r\n    %li 2\r\n    %li 3\r\n```\r\n\r\n#### 6/6/16, 22:15\r\n\r\nImplement clientHeight, clientWidth (Feature #21)\r\n\r\n- [x] clientHeight\r\n- [x] clientWidth\r\n\r\nfixed height, width (Feature #20)\r\n\r\nfixed off (Feature #19)\r\n\r\nExample (clientHeight, clientWidth):\r\n\r\n```haml\r\n%nav\r\n  %ul\r\n    %li 1\r\n    %li 2\r\n    %li 3\r\n```\r\n\r\n```JavaScript\r\njNet('nav').clientHeight(); // element\r\njNet('nav').clientWidth(); // element\r\n\r\njNet('li').clientHeight(); // returns array\r\njNet('li').clientWidth(); // returns array\r\n```\r\n\r\n#### 6/6/16, 19:49\r\n\r\nImplement prepend (Feature #16)\r\n\r\nImplement append (Feature #15)\r\n\r\nImplement text (Feature #13)\r\n\r\nImplement insertAfter, insertBefore (Feature #14)\r\n\r\n- [x] prepend\r\n- [x] append\r\n- [x] text\r\n- [x] after (old name is insertAfter)\r\n- [x] before (old name is insertBefore)\r\n\r\nrename insertAfter to after\r\n\r\nrename insertBefore to before\r\n\r\nExample (prepend):\r\n\r\n```html\r\n<div id=\"myProjects\">\r\n    <a href=\"https://fktpm.ru\">fktpm.ru</a>\r\n</div>\r\n```\r\n\r\n```JavaScript\r\njNet('#myProjects').prepend('<a href=\"https://babichev.net\">Babichev</a>');\r\n```\r\n\r\n```html\r\n<div id=\"myProjects\">\r\n    <a href=\"https://babichev.net\">Babichev</a>\r\n    <a href=\"https://fktpm.ru\">fktpm.ru</a>\r\n</div>\r\n```\r\n\r\nExample (text):\r\n\r\n```html\r\n<div id=\"myProjects\">\r\n    <a href=\"https://babichev.net\">Babichev</a>\r\n    <a href=\"https://fktpm.ru\">fktpm.ru</a>\r\n</div>\r\n```\r\n\r\n```JavaScript\r\njNet('#myProjects').text(); // Babichev fktpm.ru\r\njNet('#myProjects a').text(); // [\"Babichev\", \"fktpm.ru\"]\r\n\r\njNet('#myProjects a').text(function (content, element) {\r\n  console.log([content, element]); // no modification text in element a\r\n});\r\n\r\njNet('#myProjects a').text(function (content, element) {\r\n  return content + '!'; // result: \"Babichev!\", \"fktpm.ru!\"\r\n});\r\n```\r\n\r\nExample (after):\r\n\r\n```html\r\n<ul id=\"test1\">\r\n    <li><a href=\"\">1</a></li>\r\n    <li><a href=\"\">2</a></li>\r\n    <li><a href=\"\">3</a></li>\r\n</ul>\r\n```\r\n\r\n```JavaScript\r\njNet('li').after('<li>' + jNet('ul').outerHTML() + '</li>')\r\n```\r\n\r\n```html\r\n<ul id=\"test1\">\r\n    <li><a href=\"\">1</a></li>\r\n    <li>\r\n        <ul id=\"test1\">\r\n            <li><a href=\"\">1</a></li>\r\n            <li><a href=\"\">2</a></li>\r\n            <li><a href=\"\">3</a></li>\r\n        </ul>\r\n    </li>\r\n    <li><a href=\"\">2</a></li>\r\n    <li>\r\n        <ul id=\"test1\">\r\n            <li><a href=\"\">1</a></li>\r\n            <li><a href=\"\">2</a></li>\r\n            <li><a href=\"\">3</a></li>\r\n        </ul>\r\n    </li>\r\n    <li><a href=\"\">3</a></li>\r\n    <li>\r\n        <ul id=\"test1\">\r\n            <li><a href=\"\">1</a></li>\r\n            <li><a href=\"\">2</a></li>\r\n            <li><a href=\"\">3</a></li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n```\r\n\r\nExample (before):\r\n\r\n```html\r\n<ul id=\"test1\">\r\n    <li><a href=\"\">1</a></li>\r\n    <li><a href=\"\">2</a></li>\r\n    <li><a href=\"\">3</a></li>\r\n</ul>\r\n```\r\n\r\n```JavaScript\r\njNet('li').before('<li>' + jNet('ul').outerHTML() + '</li>')\r\n```\r\n\r\n```html\r\n<ul id=\"test1\">\r\n    <li>\r\n        <ul id=\"test1\">\r\n            <li><a href=\"\">1</a></li>\r\n            <li><a href=\"\">2</a></li>\r\n            <li><a href=\"\">3</a></li>\r\n        </ul>\r\n    </li>\r\n    <li><a href=\"\">1</a></li>\r\n    <li>\r\n        <ul id=\"test1\">\r\n            <li><a href=\"\">1</a></li>\r\n            <li><a href=\"\">2</a></li>\r\n            <li><a href=\"\">3</a></li>\r\n        </ul>\r\n    </li>\r\n    <li><a href=\"\">2</a></li>\r\n    <li>\r\n        <ul id=\"test1\">\r\n            <li><a href=\"\">1</a></li>\r\n            <li><a href=\"\">2</a></li>\r\n            <li><a href=\"\">3</a></li>\r\n        </ul>\r\n    </li>\r\n    <li><a href=\"\">3</a></li>\r\n</ul>\r\n```\r\n\r\n#### 6/6/16, 11:12\r\n\r\nfixed bug hide/show (Feature #12)\r\n\r\n- [x] hide\r\n- [x] show\r\n\r\n#### 6/6/16, 11:12\r\n\r\nImplement valid \r\n```JavaScript\r\njNet('<ul></ul>')\r\n```\r\nwith find, and preview element (without document-fragment) (Feature #11)\r\n\r\n#### 6/5/16, 00:05\r\n\r\nOptimization jNet(selector, dom) (Feature #10)\r\n\r\n#### 5/5/16, 22:25\r\n\r\nImplement innerHTML (alias html), outerHTML (Feature #9)\r\n\r\n- [x] innerHTML [alias] html\r\n- [x] outerHTML\r\n\r\nExample:\r\n\r\n```JavaScript\r\n// [\"<a href=\"\">1</a>\", \"<a href=\"\">2</a>\", \"<a href=\"\">3</a>\"]\r\njNet('li').html()\r\n\r\n//[\"<li><a href=\"\">1</a></li>\", \"<li><a href=\"\">2</a></li>\", \"<li><a href=\"\">3</a></li>\"]\r\njNet('li').outerHTML()\r\n\r\n// console.log 1\r\n// console.log 2\r\n// console.log 3\r\n// jNetObject [li, li, li], values (3, 6, 9)\r\njNet('li').html(function (html, element) {\r\n  var newObject = jNet(html).find('*');\r\n  var integer = newObject[0].innerText;\r\n  console.log(integer);\r\n  return integer * 3;\r\n});\r\n```\r\n\r\n#### 5/5/16, 21:55\r\n\r\npossibilities of selection are expanded.\r\nat the moment doesn't support: string, jNetObject...\r\n\r\nExample:\r\n\r\n```JavaScript\r\njNet('*', document.body)\r\n```\r\n\r\n#### 5/5/16, 20:33\r\n\r\nthe new feature is added in Implement attributes (attr) (Feature #5),\r\nan opportunity to transfer callback by the second parameter\r\n\r\nExample:\r\n\r\n```JavaScript\r\njNet('a:not([alt])').attr(\"alt\", function (altText, element) {\r\n   console.log([altText, element]);\r\n   return 'hello';\r\n});\r\n```\r\n\r\n#### 5/5/16, 16:42\r\n\r\nImplement closest (Feature #8)\r\n\r\n- [x] clisest\r\n\r\n#### 5/5/16, 15:15\r\n\r\nImplement hasClass, addClass, removeClass, toggleClass (Feature #7)\r\n\r\n- [x] hasClass\r\n- [x] addClass\r\n- [x] removeClass\r\n- [x] toggleClass\r\n\r\nExample:\r\n\r\n```JavaScript\r\njNet('p').addClass('hello') // p.hello\r\n\r\njNet('p').toggleClass('world') // p.hello.world\r\njNet('p').toggleClass('hello') // p.world\r\n\r\njNet('p').hasClass('hello') // false\r\njNet('p').hasClass('world') // true\r\n\r\njNet('p').removeClass('world') // p\r\n\r\njNet('li').hasClass('hello') // [false, false, false]\r\n\r\njNet('li').addClass('hello') // [li.hello, li.hello, li.hello]\r\n\r\njNet('li').hasClass('hello') // [true, true, true]\r\n```\r\n\r\n#### 5/5/16, 13:56\r\n\r\ncss (todo: style), Implement css (Feature #6)\r\n\r\nattr (without data), Implement attributes (attr) (Feature #5)\r\n\r\nremove 'class' jNetPrivate\r\n\r\nmethods jNetPrivate moved in global namespace\r\n\r\n- [x] jNetPrivate.isHTML to isHTML\r\n- [x] jNetPrivate.parseXML to parseXML\r\n- [x] jNetPrivate.trim to trim\r\n- [x] jNetPrivate.parseHTML to parseHTML\r\n\r\nExample (css):\r\n\r\n```JavaScript\r\njNet('li').css('color', null) // remove\r\njNet('li').css('color', 'yellow') // set\r\njNet('li').css('color') // get\r\n```\r\n\r\nExample (attr):\r\n\r\n```JavaScript\r\njNet('li').attr('style', null) // remove\r\njNet('li').attr('style', 'color: blue;') // set\r\njNet('li').attr('style') // get\r\n```\r\n\r\n#### 5/5/16, 12:40\r\n\r\nImplement width, height (Feature #4)\r\n\r\n- [x] width\r\n- [x] height\r\n\r\nExample:\r\n\r\n```JavaScript\r\njNet('div').width() // 100\r\njNet('div').height() // 100\r\njNet('li').height() // [20, 20]\r\n```\r\n\r\n#### 5/5/16, 11:21\r\n\r\nshow/hide (with dymanics.js) ++\r\n\r\nremove    ++ used standard method remove for elements\r\n\r\nclosest   ++\r\n\r\n- [x] forEach rewrite on while\r\n- [x] fixed more bugs\r\n\r\n#### 4/5/16\r\n\r\nrewrite js to cs\r\n\r\njNetPrivate\r\n\r\njNetPrivate.fn\r\n\r\n- [x] isHTML\r\n- [x] parseXML\r\n- [x] trim\r\n- [x] parseHTML\r\n\r\njNetObject\r\n\r\njNetObject.fn \r\n\r\n- [x] eq\r\n- [x] first\r\n- [x] last\r\n- [x] odd\r\n- [x] even\r\n- [x] clone\r\n- [x] toString\r\n- [x] each\r\n- [x] find\r\n- [x] on\r\n- [x] off\r\n- [x] ready\r\n\r\njNet (jNetFramework)\r\n\r\njNet.fn\r\n\r\n- [x] each\r\n- [x] toString\r\n\r\njNet.oFn [alias] jNetObject.fn\r\n\r\njNet -- public\r\n\r\njNetObject -- private\r\n\r\njNetPrivate -- private\r\n\r\njNet.toString = jNet.fn.toString\r\n\r\njNet.clone = jNet.oFn.clone\r\n\r\njNet.each = jNet.fn.each\r\n\r\nevent's\r\n\r\n- [x] click\r\n- [x] contextmenu\r\n- [x] dblclick\r\n- [x] mouseup\r\n- [x] mousedown\r\n- [x] mouseout\r\n- [x] mouseover\r\n- [x] mousemove\r\n- [x] keyup\r\n- [x] keydown\r\n- [x] keypress\r\n- [x] copy\r\n- [x] selectstart\r\n- [x] selectionchange\r\n- [x] select\r\n\r\njNet.fetch = require? \"fetch-polyfill\"\r\n\r\njNet.cookies = require? \"js-cookie\"\r\n\r\njNet.dynamics = require? \"dynamics.js\"\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}